diff --git a/csv_serialization/src/Encoder/CsvEncoder.php b/csv_serialization/src/Encoder/CsvEncoder.php
index 9d4ab73ae..3dce6de26 100644
--- a/csv_serialization/src/Encoder/CsvEncoder.php
+++ b/csv_serialization/src/Encoder/CsvEncoder.php
@@ -65,7 +65,7 @@ class CsvEncoder implements EncoderInterface, DecoderInterface {
    *
    * @var string
    */
-  protected static $format = 'csv';
+  protected static string $format = 'csv';
 
   /**
    * Indicates usage of UTF-8 signature in generated CSV file.
@@ -106,14 +106,14 @@ public function __construct($delimiter = ",", $enclosure = '"', $escape_char = "
   /**
    * {@inheritdoc}
    */
-  public function supportsEncoding(string $format):bool {
+  public function supportsEncoding($format):bool {
     return $format == static::$format;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function supportsDecoding(string $format):bool {
+  public function supportsDecoding($format):bool {
     return $format == static::$format;
   }
 
@@ -122,7 +122,7 @@ public function supportsDecoding(string $format):bool {
    *
    * Uses HTML-safe strings, with several characters escaped.
    */
-  public function encode($data, string $format, array $context = []):string {
+  public function encode($data, $format, array $context = []):string {
     switch (gettype($data)) {
       case "array":
         break;
@@ -290,7 +290,7 @@ protected function formatValue($value) {
      * @throws \League\Csv\Exception
      * @throws \League\Csv\Exception
      */
-  public function decode($data, string $format, array $context = []) {
+  public function decode($data, $format, array $context = []) {
     $csv = Reader::createFromString($data);
     $csv->setDelimiter($this->delimiter);
     $csv->setEnclosure($this->enclosure);
