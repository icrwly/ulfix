<?php

/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * Adds a TrustArc JS code to page.
 */

/**
 * Implements hook_preprocess_page().
 */
function ul_trustarc_preprocess_page(&$variables) {

  // NOT for Admin pages:
  if ($is_admin = \Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // NOT for unpublished pages:
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && $node->status->getString() == 0) {
    return;
  }

  $current_uri = \Drupal::request()->getRequestUri();

  // Not for admin, user or batch pages:
  $not_needed = [
    '/admin' => 6,
    '/batch' => 6,
    '/user' => 5,
    '/node' => 5,
  ];

  foreach ($not_needed as $path => $strlen) {
    if (substr($current_uri, 0, $strlen) == $path) {
      // It is OK to show the cookie banner on the login page:
      if ($path == '/user' && substr($current_uri, 0, 11) == '/user/login') {
        break;
      }

      return;
    }
  }

  // Attach library:
  $variables['#attached']['library'][] = 'ul_trustarc/ul_trustarc.js_lib';

  // Module settings:
  $config = \Drupal::config('ul_trustarc.settings');
  $domain = $config->get('domain');

  // Add Domain value to JS context.
  $variables['#attached']['drupalSettings']['trustarc']['domain'] = $domain;

}

/**
 * Implements hook_library_info_build().
 *
 * Important: This defines and adds the external TrustArc JS library!
 */
function ul_trustarc_library_info_build() {
  $libraries = [];

  $config = \Drupal::config('ul_trustarc.settings');

  if (!$module_enabled = $config->get('module_enable')) {
    return $libraries;
  }

  if (!$script_url = $config->get('script_url')) {
    return $libraries;
  }

  if (!$target_element = $config->get('target_element')) {
    return $libraries;
  }

  if (!$domain = $config->get('domain')) {
    return $libraries;
  }

  // The base URL:
  $url = $script_url;

  // Add domain:
  $url .= '?domain=' . $domain;

  // Add target DIV id:
  $url .= '&c=' . $target_element;

  // Implement consent manager with "Black Bar" (bb):
  // Cookie banner:
  $url .= '&js=nj';
  $url .= '&noticeType=bb';

  // Implement consent manager button with text link:
  // (Instead of image).
  $url .= '&text=true';

  // We all use GTM, set to TRUE:
  $url .= '&gtm=1';

  // TESTING SETTINGS:
  // =======================================.
  // Add country (2 letter ISO country code):
  if ($country = $config->get('country')) {
    $url .= '&country=' . $country;
  }

  // Add language (2 letter ISO language code):
  if ($language = $config->get('language')) {
    $url .= '&language=' . $language;
  }

  // Add behavior (expressed or implied):
  if ($behavior = $config->get('behavior')) {
    $url .= '&behavior=' . $behavior;
  }

  // Add Privacy Policy URL:
  // NOTE: This must be the last URL parameter!
  // ==========================================.
  if ($privacy_policy_url = $config->get('privacy_policy_url')) {
    $url .= '&privacypolicylink=' . urlencode($privacy_policy_url);
  }

  // Add the library item with the dynamic URL and parameters:
  // '//consent.trustarc.com/notice?domain=ulsolutionsweb.com&c=teconsent&js=nj&noticeType=bb&text=true&gtm=1'.
  $libraries['external_js'] = [
    'version' => '1.x',
    'js' => [
      $url => [
        'type' => 'external',
        'minified' => TRUE,
        'attributes' => [
          'async' => 'async',
          'crossorigin' => '',
        ],
      ],
    ],
  ];

  return $libraries;

}

/**
 * Implements hook_page_attachments_alter().
 *
 *  Add tag re-write for Acquia Lift JS.
 */
function ul_trustarc_page_attachments_alter(array &$attachments) {
  // ACQUIA LIFT - targeting (tracking) cookie:
  if (isset($attachments['#attached']['html_head']) && is_array($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as $key => $val) {
      if (is_array($val) && isset($val[1]) && $val[1] == 'acquia_lift_javascript') {
        $attributes = [
          'type' => 'text/plain',
          'class' => 'trustecm',
          'data-cookiecategory' => 3,
        ];
        $attachments['#attached']['html_head'][$key][0]['#attributes'] = array_merge($attributes, $attachments['#attached']['html_head'][$key][0]['#attributes']);
      }
    }
  }
}
