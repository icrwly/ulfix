<?php

namespace Drupal\ul_testing;

use Drupal\paragraphs\Entity\Paragraph;

/**
 * Provides shared tools for yhe UL Testing module.
 */
class UtilityService {

  /**
   * Constructs a UtilityService object.
   */
  public function __construct() {
    // You can skip injecting this service, the trait will fall back to
    // \Drupal::translation(), but it is recommended to do so, for easier
    // testability.
  }

  /**
   * Returns an an array of custom fields for an entity.
   *
   * @param string $entity_type
   *   The entity type, node, user, paragraph, etc.
   * @param string $bundle
   *   The bundle.
   * @param bool $assoc
   *   If TRUE, return an associative array mapping field name to NULL values.
   *
   * @return array
   *   An array of custom fields for the entity.
   */
  public function getCustomFields($entity_type, $bundle, $assoc = FALSE) {

    $entityFieldManager = \Drupal::service('entity_field.manager');
    $keys = array_keys($entityFieldManager->getFieldDefinitions($entity_type, $bundle));

    $fields = [];
    foreach ($keys as $f) {
      if (substr($f, 0, 6) == 'field_') {
        if ($assoc) {
          $fields[$f] = NULL;
        }
        else {
          $fields[] = $f;
        }
      }
    }

    return $fields;

  }

  /**
   * Creates a paragraph entity and adds it to a paragraph reference field.
   *
   * @param object $entity
   *   The entity to add the paragraph to.
   * @param string $field
   *   The name of the paragraph field.
   * @param string $paragraph_type
   *   The paragraph type to create.
   * @param array $field_values
   *   Assoc array of field value pairs to populate. The getCustomFields
   *   function will be used if null. Values will be autogenerated if empty.
   * @param array $data
   *   The uploaded test data array.
   * @param int $index
   *   Optional index in the test data array.
   *
   * @return object
   *   The newly created paragraph entity.
   */
  public function addParagraph(object $entity, $field, $paragraph_type, array $field_values = NULL, array &$data, $index) {

    // If the $field_values are empty use the 'getCustomFields' function
    // to return the custom fields for the paragraph type.
    if (empty($field_values)) {
      $field_values = \Drupal::service('ul_testing.utility_service')->getCustomFields('paragraph', $paragraph_type, TRUE);
    }

    $paragraph = Paragraph::create([
      'type' => $paragraph_type,
    ]);

    foreach ($field_values as $f => $v) {
      if (empty($v)) {
        \Drupal::service('ul_testing.field_generator_service')->setEntityFieldValue($paragraph, $f, $data, $index, $entity);
      }
      else {
        $paragraph->set($f, $v);
      }
    }
    $paragraph->save();

    $entity->{$field}[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];

    return $paragraph;

  }

  /**
   * Sets values for fields that can be auto-generated.
   *
   * @param object $entity
   *   The entity to set the field values on.
   * @param array $data
   *   The uploaded test data array.
   * @param int $index
   *   Optional index in the test data array.
   */
  public function setAutoFields(&$entity, array &$data, $index = NULL) {

    $bundle = $entity->bundle();

    $info = \Drupal::service('ul_testing.validation_service')->getTypeInfo($bundle);
    if (isset($info['auto_field'])) {
      foreach ($info['auto_field'] as $field) {
        if ($entity->hasField($field)) {

          if ($field == 'field_shared_header_description') {
            \Drupal::service('ul_testing.field_generator_service')
              ->setNodeSharedHeaderDescription($entity, $field, $data, $index);
          }
          else {
            \Drupal::service('ul_testing.field_generator_service')->setEntityFieldValue($entity, $field, $data, $index);

          }
        }
      }
    }
  }

}
