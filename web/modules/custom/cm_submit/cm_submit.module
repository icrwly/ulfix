<?php

/**
 * @file
 * Restores the dynamic submit button which WBM previously provided.
 */

use Drupal\content_moderation\Plugin\Field\ModerationStateFieldItemList;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeForm;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function cm_submit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!($form_state->getFormObject() instanceof NodeForm)) {
    return;
  }

  update_submit_actions($form['actions'], $form_state, $form_state->getFormObject()->getEntity());

  $form['#entity_builders']['update_status'] = '\Drupal\cm_submit\Plugin\Field\FieldWidget\CMSubmitButtonsWidget::updateStatus';
}

/**
 * Helper function to update submit actions.
 */
function update_submit_actions(&$element, FormStateInterface $form_state, NodeInterface $node) {
  if (FALSE && $element['submit']['#access'] && \Drupal::currentUser()->hasPermission('administer nodes')) {
    // Add a "Publish" button.
    $element['publish'] = $element['submit'];
    // If the "Publish" button is clicked, update the status to "published".
    $element['publish']['#published_status'] = TRUE;
    $element['publish']['#dropbutton'] = 'save';
    if ($node->isNew()) {
      $element['publish']['#value'] = t('Save and publish');
    }
    else {
      $element['publish']['#value'] = $node->isPublished() ? t('Save and keep published') : t('Save and publish');
    }
    $element['publish']['#weight'] = 0;

    // Add a "Unpublish" button.
    $element['unpublish'] = $element['submit'];
    // If the "Unpublish" button is clicked, update the status to "unpublished".
    $element['unpublish']['#published_status'] = FALSE;
    $element['unpublish']['#value'] = t('Unpublish');
    $element['unpublish']['#weight'] = 10;

    // If already published, the 'publish' button is primary.
    if ($node->isPublished()) {
      unset($element['unpublish']['#button_type']);
    }
    // Otherwise, the 'unpublish' button is primary and should come first.
    else {
      unset($element['publish']['#button_type']);
      $element['unpublish']['#weight'] = -10;
    }

    // Remove the "Save" button.
    $element['submit']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function cm_submit_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if (isset($fields['moderation_state']) && $fields['moderation_state']->getClass() === ModerationStateFieldItemList::class) {
    $fields['moderation_state']->setDisplayOptions('form', [
      'type' => 'cm_submit_buttons',
      'weight' => 5,
      'settings' => [],
    ]);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function cm_submit_preprocess_node(&$variables) {
  $variables['latest_revision_state'] = '';
  $variables['current_revision_state'] = '';

  $node = $variables['node'];

  $variables['current_revision_state'] = _safe_get_moderation_state($node);

  if ($node->isDefaultRevision() && !$node->isLatestRevision()) {
    $current_revision_id = $node->getRevisionId();

    // Get all of the revision ids.
    $revision_ids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($variables['node']);

    // Check if the last item in the revisions is the loaded one.
    $last_revision_id = end($revision_ids);

    if ($current_revision_id != $last_revision_id) {
      // Load the latest revision, so we can reference it's state.
      $last_revision = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($last_revision_id);
      // Get the revision's moderation state.
      $variables['latest_revision_state'] = _safe_get_moderation_state($last_revision);
    }
  }
}

/**
 * Another helper function.
 */
function _safe_get_moderation_state($node) {
  if ($node->hasField('moderation_state')) {
    return $node->get('moderation_state')->getString();
  }
}

/**
 * Implements hook_page_attachments().
 */
function cm_submit_page_attachments(array &$attachments) {
  // Get the current path:
  $current_path = \Drupal::service('path.current')->getPath();
  // URL patterns:
  $patterns = [
    '/\/node\/\d+\/edit/',
    '/\/node\/add\/[a-zA-Z0-9_]*/',
    '/\/node\/[a-zA-Z0-9_]*\/translations\/add/',
    '/\/block\/[0-9]*/',
    '/\/block\/[0-9]*\/translations\/add\/[a-z\-]*\/[a-z\-]*/',
  ];
  // Loop through the patterns, and look for a match:
  foreach ($patterns as $pattern) {
    if (preg_match_all($pattern, $current_path)) {
      // If matched, attach CM Submit library:
      $attachments['#attached']['library'][] = 'cm_submit/cm_submit.admin';
    }
  }
}
